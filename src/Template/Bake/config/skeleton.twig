{% set wantedOptions = ['length', 'limit', 'default', 'unsigned', 'null', 'comment', 'autoIncrement']|reverse %}
{% set tableMethod = Migration.tableMethod(action) %}
{% set columnMethod = Migration.columnMethod(action) %}
{% set indexMethod = Migration.indexMethod(action) %}
<?php
/**
 * CakePHP(tm) : Rapid Development Framework (http://cakephp.org)
 * Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)
 *
 * Licensed under The MIT License
 * For full copyright and license information, please see the LICENSE.txt
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright     Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)
 * @link          http://cakephp.org CakePHP(tm) Project
 * @since         3.0.0
 * @license       http://www.opensource.org/licenses/mit-license.php MIT License
 */
use Migrations\AbstractMigration;

class {{ name }} extends AbstractMigration
{
    {% if tableMethod == 'create' and columns.primaryKey is not defined %}

    public $autoId = false;

    {% endif %}
    /**
     * Change Method.
     *
     * More information on this method is available here:
     * http://docs.phinx.org/en/latest/migrations.html#the-change-method
     * @return void
     */
    public function change()
    {
{% for table in tables %}
        $table = $this->table('{{ table }}');
    {% if tableMethod == 'drop' %}
        {% if columnMethod == 'removeColumn' %}
            {% for column,config in columns.fields %}
                $table->{{ columnMethod }}({{ column }})
            {% endfor %}
            {% for column,config in columns.indexes %}
                $table->{{ indexMethod }}([{{ Migration.stringifyList(config.columns) }}])
            {% endfor %}
        {% else %}
            {% for column,config in columns.fields %}
                $table-><{{ columnMethod }}('{{ column }}', '{{ config.columnType }}', [
                {% set columnOptions = Migration.intersect(config.options, wantedOptions, true) %}
                {% if columnOptions.comment is empty %}
                    {% set columnOptions = Migration.unsetVal('comment', columnOptions) %}
                {% endif %}
                {{ Migration.stringifyList(columnOptions, {'indent': 3}) }}
                ]);
            {% endfor %}
            {% for column,config in columns.indexes %}

                $table->{{ indexMethod }}(
                [ {{ Migration.tringifyList(config.columns, {'indent': 3}) }}],
                [
                {% set options = {} %}
                {{ Migration.stringifyList(config.options, {'indent': 3}) }}
                ]);
            {% endfor %}
            {% if tableMethod == 'create' and columns.primaryKey is not empty %}
                $table->addPrimaryKey([ {{ Migration.stringifyList(columns.primaryKey, {'indent': 3}) }} ]);
            {% endif %}
        {% endif %}
    {% endif %}
    $table->{{ tableMethod }}();
{% endfor %}
}
}
